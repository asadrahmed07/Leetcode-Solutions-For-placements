//Leetcode problem no. 494
class Solution {

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for(int x : nums) {
            sum += x;
        }
        
        if((sum-target)%2 != 0 || (target > sum)) {
            return 0;
        }
        
        int subset1 = (sum-target)/2;
        int n = nums.length;
        int[][]dp = new int[n+1][subset1 +1];  // from here the part of count no of subset sum will start
        
        for(int i = 0; i < n+1; i++) {
            for(int j = 0; j < subset1+1; j++) {
                if(i == 0) 
                    dp[i][j] = 0;
                
                if(j == 0) 
                    dp[i][j] = 1;
            }
        }
        
        for(int i = 1; i < n+1; i++) {
            for(int j = 1; j < subset1+1; j++) {
                if(nums[i-1] > j || nums[i-1] == 0) {
                    dp[i][j] = dp[i-1][j];
                }
                else {
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
                }
            }
        }
        
        int count = 0;
        for(int x : nums) {
            if( x == 0) {
                count++;
            }
        }
        
        return (int)(Math.pow(2,count))* dp[n][subset1];
        
    }
}
