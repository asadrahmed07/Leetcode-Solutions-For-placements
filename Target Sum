//Leetcode problem no. 494
class Solution {
    
    public int countSubsetSum(int[] arr ,int sum) {
        int n = arr.length;
        int[][] dp = new int[n+1][sum+1];
        
        for(int i = 0; i < n+1 ; i++) {
             for(int j = 0; j < sum+1; j++) {
                   if( i == 0) {
                        dp[i][j] = 0;
                   }  
                   if(j == 0) {
                       dp[i][j] = 1;
                   }
              } 
        }
           for(int i = 1; i < n+1 ; i++) {
             for(int j = 1; j < sum+1; j++) {
                   if( arr[i-1] <= j) {
                        dp[i][j] = dp[i-1][j-arr[i-1]]  + dp[i-1][j];
                   }  
                   else {
                       dp[i][j] = dp[i-1][j];
                   }
              } 
        }
        
        
        return dp[n][sum];
        
    }
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0; 
        for(int i : nums) {
            sum += i;
        }
        
        if((target-sum)%2 == 1 || target > sum) {
            return 0;
        }
        int subset1 = (sum - target)/2;
        
        return countSubsetSum(nums , subset1);
    }
}
