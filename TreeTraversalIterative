//Iterative way 

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class Tree {

    static Scanner sc = null;

    public static void main(String[] args) {
        sc = new Scanner(System.in);
        Node root = createNode();

        ITinOrder(root);
        ITpreOrder(root);
        ITpostOrder(root);

        sc.close();
    }

    static void ITinOrder(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        Stack<Node> stack = new Stack();

        if (root == null) {
            return;
        }
        Node curr = root;

        while (curr != null || !stack.isEmpty()) {
            while (curr != null) {
                stack.push(curr);
                curr = curr.left;
            }

            curr = stack.pop();
            result.add(curr.data);
            curr = curr.right;
        }

        for (int i : result) {
            System.out.print(i + " ");
        }
        System.out.println();
    }

    static void ITpreOrder(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) {
            return;
        }
        Stack<Node> stack = new Stack();

        stack.push(root);
        while (!stack.isEmpty()) {
            Node curr = stack.pop();
            result.add(curr.data);
            if (curr.right != null)
                stack.push(curr.right);
            if (curr.left != null)
                stack.push(curr.left);
        }

        for (int i : result) {
            System.out.print(i + " ");
        }
        System.out.println();
    }

    static void ITpostOrder(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) {
            return;
        }
        Stack<Node> stack = new Stack();

        stack.push(root);
        while (!stack.isEmpty()) {
            Node curr = stack.pop();
            result.add(0, curr.data);
            if (curr.left != null)
                stack.push(curr.left);
            if (curr.right != null)
                stack.push(curr.right);
        }

        for (int i : result) {
            System.out.print(i + " ");
        }
        System.out.println();
    }

    static Node createNode() {
        Node root = null;
        System.out.println("Enter data : ");
        int data = sc.nextInt();
        if (data == -1) {
            return null;
        }
        root = new Node(data);
        System.out.println("Enter left for " + data);
        root.left = createNode();

        System.out.println("Enter right for " + data);
        root.right = createNode();

        return root;
    }

}

class Node {
  int data;
  Node left;
  Node right;

  public Node(int data) {
    this.data = data;
  }
}
