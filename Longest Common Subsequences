//Leetcode problem no. 1143

//Memoization 
class Solution {
    static int[][] dp = new int[1001][1001];
    public int lcs(String x , String y , int n , int m) {
        if( n == 0|| m == 0) {
            return 0;
        }
        if(dp[n][m] != -1) {
            return dp[n][m];
        }
        
        if(x.charAt(n-1) == y.charAt(m-1)) {
            return dp[n][m] = 1+lcs(x , y , n-1, m-1);
        }
        else {
            return dp[n][m] = Math.max(lcs(x,y,n-1,m) , lcs(x,y,n,m-1));
        }
    }
    public int longestCommonSubsequence(String x, String y) {
        for(int[] i : dp) {
            Arrays.fill(i,-1);
        }
        return lcs(x , y , x.length(), y.length());
    }
}

// Top-Down Approach
class Solution {
    static int[][] dp = new int[1001][1001];
    public int lcs(String x , String y , int n , int m) {
        
        for(int i = 0; i < n+1; i++) {
            for(int j = 0; j < m+1; j++) {
                if( i == 0 || j == 0) {
                    dp[i][j] = 0;
                }
            }
        }
        
        for(int i = 1; i < n+1; i++) {
            for(int j = 1; j < m+1; j++) {
                if(x.charAt(i-1) == y.charAt(j-1)) {
                    dp[i][j] = 1+dp[i-1][j-1];
                }
                else {
                    dp[i][j] = Math.max(dp[i-1][j] , dp[i][j-1]);
                }
            }
        }
        
        return dp[n][m];
        
    }
    public int longestCommonSubsequence(String text1, String text2) {
        return lcs(text1 , text2 , text1.length() , text2.length());
    }
}
